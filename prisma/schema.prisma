// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Recipe {
  id            String        @id @default(cuid())
  userId        String
  name          String        @db.VarChar(100)
  servings      Int
  ingredients   String[]
  instructions  String        @db.VarChar(10000)
  duration      Int?          // duration in minutes
  difficulty    Int?          // scale: 1 (easy) to 10 (hard)
  isFavorite    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  plannedMeals  PlannedMeal[]
  cookCount     Int           @default(0)
}

model PlannedMeal {
  id                   String   @id @default(cuid())
  userId               String
  recipe               Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId             String
  overrideName         String?  @db.VarChar(100)
  overrideIngredients  String[] @default([])
  overrideInstructions String?  @db.VarChar(10000)
  overrideServings     Int?
  overrideDuration     Int?
  overrideDifficulty   Int?

  status               PlannedMealStatus @default(PLANNED)
  createdAt            DateTime          @default(now())
  cookedAt             DateTime?
}

model UserDietaryPreferences {
  userId      String   @id
  preferences String   @db.VarChar(10000)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId])
}

enum PlannedMealStatus {
  PLANNED
  COOKED
}
